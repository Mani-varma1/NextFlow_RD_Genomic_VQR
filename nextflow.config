// Default parameters

profiles{
    docker {
        docker.enabled         = true
        singularity.enabled    = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
    }
    slurm {
        process.executor = 'slurm'
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
}

// DNANexus has one selection for the output files so re-route results to the output dir

params {
    platform = "local"
    samplesheet = "$projectDir/samplesheet.tsv"
    genome_file = "$projectDir/data/genome/Homo_sapiens_assembly38.fasta"
    genome_index_files = "$projectDir/results/GENOME_IDX/BWA/*.fast*"
    genome_index_files = "$projectDir/results/GENOME_IDX/DRAG"
    qsrVcfs = "$projectDir/qsr_vcfs/*.vc*"
    index_genome = false
    fastqc = false
    trimmomatic = false
    outdir = "./results"
    // aligner = "bwa-mem"
    aligner = "dragmap"
    degraded_dna = false
    variant_caller = "haplotype-caller"
    bqsr = true
    variant_recalibration = true
    identity_analysis = false
    fasta_dict = "$projectDir/data/genome/Homo_sapiens_assembly38.dict"
    fasta_fai = "$projectDir/data/genome/Homo_sapiens_assembly38.fasta.fai"
}

// Processes should always fail if any pipe element has a non-zero exit code.
process.shell = ['/bin/bash', '-euo', 'pipefail']


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/nextflow_reports/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/nextflow_reports/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/nextflow_reports/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/nextflow_reports/pipeline_dag_${trace_timestamp}.html"
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
params {
    // Provide fallback defaults only if they aren’t given on the command line or in another config
    max_cpus   = (params.max_cpus)   ?: 16
    max_memory = (params.max_memory) ?: '74 GB'
}

def check_max(obj, type) {
    if (type == 'memory') {
        // If user hasn’t passed max_memory at all, skip or use default
        def maxMem = (params.max_memory
                      ? params.max_memory as nextflow.util.MemoryUnit
                      : obj)
        if (obj.compareTo(maxMem) == 1) {
            return maxMem
        } else {
            return obj
        }
    }
    else if (type == 'time') {
        def maxTime = (params.max_time
                       ? params.max_time as nextflow.util.Duration
                       : obj)
        if (obj.compareTo(maxTime) == 1) {
            return maxTime
        } else {
            return obj
        }
    }
    else if (type == 'cpus') {
        // If user hasn’t passed max_cpus at all, skip or use default
        def maxCpu = (params.max_cpus ? params.max_cpus as int : obj)
        try {
            return Math.min(obj as int, maxCpu)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}